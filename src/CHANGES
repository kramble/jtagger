2023-02-12 First release on github

2023-02-13 Minor refactoring, bugfixes

Separated the user code into usercode.c and moved some stuff around (it would
be useful to make the main code a library, but baby steps for now).

Made the default (without -v) significantly less chatty (I had left a lot
of debug stuff enabled by default).

Downgraded some errors to warnings so it should now work with FPGAs other than
the EP4CE22 (ie not just the DE0-Nano). Probably still only the Altera/Intel
Cyclone family, but YMMV.

2023-02-15 Insights from Jrunner

Jrunner was Altera's reference code for non-quartus hosted JTAG programming,
see program.c for commentary. I took onboard some insights and added several
configuration parameters in devices.c (these are only populated for the
DE0-Nano EP4CE22, refer to the Jrunner source for values appropriate to other
devices). Also stripped out older debug code (-x mode) and fixed a couple of
edge-case bugs in data handling. Still got plenty of tidying up to do, but it
seems good enough for now, and I want to move on to the verilog side.

2023-02-16 Porting raspi and win32

Added support for compilation on raspberry pi (a very old original pi, running
raspbian jessie), via CFLAGS = -std=gnu99 (not c99 which still has warnings)
It works fine ;-)

Windows was a nightmare. I have an oldish MinGW-32 on Windows 10 that I used
for testing. Jtagger source needed some minor changes but building libftdi
from source is not at all straightforward. So I cheated and downloaded a
prebuilt version. It works, see README_Win32.txt for details.

2023-02-17 Added fpga/txrxmem demo

Writes and reads to fpga block ram. It's a little slow, but there is a lot
of scope to speed it up via buffering and bulk transfer. Slightly buggy
(see notes in usercode.c) but a very nice demo nonetheless.

2023-02-19 Bugfixed txrxmem, added FAST bulk upload

FAST is an understatement. It uploads at the same speed as the programming
function (approx 300Kbytes/sec), try it via ./jtagger -us

2023-02-20 Added stress test -ux (updated, changed option from -ut to -ux)
Note that usercode options can be combined eg -u wsx (space is optional
which is a quirk of my switch handling, TODO: really should use getopt)

2023-02-20 Added timing test -ut
This mode captures the sld_virtual_jtag signals into ram and reads them
back for analysis. This identified a nasty issue with long delays when
reading from FTDI. Fixing this should alleviate the poor read performance.
Debug work is in progress on this.

2023-02-21 Speedups for jtag read
Added buffering for FTDI I/O and refactored a bit. Reading is still slow
but I suspect this is down to the FTDI driver itself. Interestingly the
windows version is significantly faster than the linux one. The next step
is to group the reads into blocks rather than 32 bits at a time. Laters.
 
NEWS
Looking ahead ... 
The eventual aim is to communicate with a soft-core CPU (I've successfully
used the OpenCores Amber ARM2-compatible CPU in previous projects). This very
likely duplicates other existing jtag uart-based code (and yes, OpenOCD), but
the objective here is to avoid dependancy on Quartus and to KISS.

